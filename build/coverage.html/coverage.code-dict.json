{"/home/travis/build/npmtest/node-npmtest-homebridge-chamberlain/test.js":"/* istanbul instrument in package npmtest_homebridge_chamberlain */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-chamberlain/lib.npmtest_homebridge_chamberlain.js":"/* istanbul instrument in package npmtest_homebridge_chamberlain */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_chamberlain = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_chamberlain = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-chamberlain/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-chamberlain && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_chamberlain */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_chamberlain\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_chamberlain.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_chamberlain.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_chamberlain.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_chamberlain.__dirname + '/lib.npmtest_homebridge_chamberlain.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-chamberlain/node_modules/homebridge-chamberlain/src/index.js":"const ChamberlainAccessory = require('./chamberlain-accessory');\nconst instance = require('./instance');\n\nmodule.exports = homebridge => {\n  instance.homebridge = homebridge;\n\n  homebridge.registerAccessory(\n    'homebridge-chamberlain',\n    'Chamberlain',\n    ChamberlainAccessory\n  );\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-chamberlain/node_modules/homebridge-chamberlain/src/chamberlain-accessory.js":"const _ = require('underscore');\nconst Api = require('./api');\nconst instance = require('./instance');\n\nconst ACTIVE_DELAY = 1000 * 2;\nconst IDLE_DELAY = 1000 * 10;\n\nmodule.exports = class {\n  constructor(log, {deviceId, name, password, username}) {\n    this.log = log;\n    this.api = new Api({MyQDeviceId: deviceId, password, username});\n\n    const {Service, Characteristic} = instance.homebridge.hap;\n    const {CurrentDoorState, TargetDoorState} = Characteristic;\n\n    this.apiToHap = {\n      1: CurrentDoorState.OPEN,\n      2: CurrentDoorState.CLOSED,\n      4: CurrentDoorState.OPENING,\n      5: CurrentDoorState.CLOSING\n    };\n\n    this.hapToApi = {\n      [TargetDoorState.OPEN]: 1,\n      [TargetDoorState.CLOSED]: 0\n    };\n\n    this.hapToEnglish = {\n      [CurrentDoorState.OPEN]: 'open',\n      [CurrentDoorState.CLOSED]: 'closed',\n      [CurrentDoorState.OPENING]: 'opening',\n      [CurrentDoorState.CLOSING]: 'closing'\n    };\n\n    this.currentToTarget = {\n      [CurrentDoorState.OPEN]: TargetDoorState.OPEN,\n      [CurrentDoorState.CLOSED]: TargetDoorState.CLOSED,\n      [CurrentDoorState.OPENING]: TargetDoorState.OPEN,\n      [CurrentDoorState.CLOSING]: TargetDoorState.CLOSED\n    };\n\n    const service = this.service = new Service.GarageDoorOpener(name);\n\n    this.states = {\n      doorstate:\n        service\n          .getCharacteristic(Characteristic.CurrentDoorState)\n          .on('get', this.getCurrentDoorState.bind(this))\n          .on('change', this.logChange.bind(this, 'doorstate')),\n      desireddoorstate:\n        service\n          .getCharacteristic(Characteristic.TargetDoorState)\n          .on('set', this.setTargetDoorState.bind(this))\n          .on('change', this.logChange.bind(this, 'desireddoorstate'))\n    };\n\n    this.states.doorstate.value = CurrentDoorState.CLOSED;\n    this.states.desireddoorstate.value = TargetDoorState.CLOSED;\n\n    (this.poll = this.poll.bind(this))();\n  }\n\n  poll() {\n    clearTimeout(this.pollTimeoutId);\n    const {doorstate, desireddoorstate} = this.states;\n    return new Promise((resolve, reject) =>\n      doorstate.getValue(er => er ? reject(er) : resolve())\n    ).then(() =>\n      doorstate.value !== desireddoorstate.value ? ACTIVE_DELAY : IDLE_DELAY\n    ).catch(_.noop).then((delay = IDLE_DELAY) => {\n      clearTimeout(this.pollTimeoutId);\n      this.pollTimeoutId = setTimeout(this.poll, delay);\n    });\n  }\n\n  logChange(name, {oldValue, newValue}) {\n    const from = this.hapToEnglish[oldValue];\n    const to = this.hapToEnglish[newValue];\n    this.log.info(`${name} changed from ${from} to ${to}`);\n\n    if (name === 'doorstate') {\n      this.reactiveSetTargetDoorState = true;\n      this.states.desireddoorstate.setValue(this.currentToTarget[newValue]);\n      delete this.reactiveSetTargetDoorState;\n    }\n  }\n\n  getErrorHandler(cb) {\n    return er => {\n      this.log.error(er);\n      cb(er);\n    };\n  }\n\n  getCurrentDoorState(cb) {\n    return this.api.getDeviceAttribute({name: 'doorstate'})\n      .then(value => cb(null, this.apiToHap[value]))\n      .catch(this.getErrorHandler(cb));\n  }\n\n  setTargetDoorState(value, cb) {\n    if (this.reactiveSetTargetDoorState) return cb();\n\n    value = this.hapToApi[value];\n    return this.api.setDeviceAttribute({name: 'desireddoorstate', value})\n      .then(() => {\n        this.poll();\n        cb();\n      })\n      .catch(this.getErrorHandler(cb));\n  }\n\n  getServices() {\n    return [this.service];\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-chamberlain/node_modules/homebridge-chamberlain/src/api.js":"const _ = require('underscore');\nconst fetch = require('node-fetch');\nconst url = require('url');\n\nconst MyQApplicationId =\n  'NWknvuBd7LoFHfXmKNMBcgajXtZEgKUh4V7WNzMidrpUUluDpVYVZx+xT4PCM5Kx';\nconst protocol = 'https:';\nconst host = 'myqexternal.myqdevice.com';\n\nconst GATEWAY_ID = 1;\n\nconst req = ({body, headers, method, pathname, query}) =>\n  fetch(url.format({host, pathname, protocol, query}), {\n    body: body == null ? body : JSON.stringify(body),\n    headers: _.extend({\n      'Content-Type': 'application/json',\n      'User-Agent': 'Chamberlain/3.61.1 (iPhone; iOS 10.0.1; Scale/2.00)',\n      ApiVersion: '4.1',\n      BrandId: '2',\n      Culture: 'en',\n      MyQApplicationId\n    }, headers),\n    method\n  }).then(res => res.json()).then(data => {\n    const {ReturnCode: code, ErrorMessage: message} = data;\n    if (code !== '0') throw new Error(message || `Unknown Error (${code})`);\n\n    return data;\n  });\n\nmodule.exports = class {\n  constructor(options = {}) {\n    this.options = options;\n  }\n\n  getSecurityToken(options = {}) {\n    options = _.extend({}, this.options, options);\n    const {password, SecurityToken, username} = options;\n    if (SecurityToken) return Promise.resolve(SecurityToken);\n\n    return req({\n      method: 'POST',\n      pathname: '/api/v4/User/Validate',\n      body: {password, username}\n    }).then(({SecurityToken}) => {\n      this.options = _.extend({}, this.options, {SecurityToken});\n      return SecurityToken;\n    });\n  }\n\n  getDeviceList(options = {}) {\n    return this.getSecurityToken(options).then(SecurityToken =>\n      req({\n        method: 'GET',\n        pathname: '/api/v4/UserDeviceDetails/Get',\n        headers: {SecurityToken},\n        query: {filterOn: 'true'}\n      })\n    ).then(({Devices}) => Devices);\n  }\n\n  getDeviceId(options = {}) {\n    options = _.extend({}, this.options, options);\n    const {MyQDeviceId} = options;\n    if (MyQDeviceId) return Promise.resolve(MyQDeviceId);\n\n    return this.getDeviceList(options).then(devices => {\n      const withoutGateways = _.reject(devices, {MyQDeviceTypeId: GATEWAY_ID});\n      const ids = _.map(withoutGateways, 'MyQDeviceId');\n      const {0: MyQDeviceId, length} = ids;\n      if (length === 0) throw new Error('No controllable devices found');\n\n      if (length === 1) {\n        this.options = _.extend({}, this.options, {MyQDeviceId});\n        return MyQDeviceId;\n      }\n\n      throw new Error(`Multiple controllable devices found: ${ids.join(', ')}`);\n    });\n  }\n\n  maybeRetry(fn) {\n    return fn().catch(er => {\n      if (er.message.indexOf('Please login again') === -1) throw er;\n\n      this.options = _.omit(this.options, 'SecurityToken');\n      return fn();\n    });\n  }\n\n  getSecurityTokenAndMyQDeviceId(options = {}) {\n    return this.maybeRetry(() =>\n      this.getSecurityToken(options).then(SecurityToken =>\n        this.getDeviceId(options).then(MyQDeviceId => ({\n          SecurityToken,\n          MyQDeviceId\n        }))\n      )\n    );\n  }\n\n  getDeviceAttribute(options = {}) {\n    const {name: AttributeName} = options;\n    return this.maybeRetry(() =>\n      this.getSecurityTokenAndMyQDeviceId(options).then(\n        ({SecurityToken, MyQDeviceId}) =>\n          req({\n            method: 'GET',\n            pathname: '/api/v4/DeviceAttribute/GetDeviceAttribute',\n            headers: {SecurityToken},\n            query: {AttributeName, MyQDeviceId}\n          }).then(({AttributeValue}) => AttributeValue)\n      )\n    );\n  }\n\n  setDeviceAttribute(options = {}) {\n    const {name: AttributeName, value: AttributeValue} = options;\n    return this.maybeRetry(() =>\n      this.getSecurityTokenAndMyQDeviceId(options).then(\n        ({SecurityToken, MyQDeviceId}) =>\n          req({\n            method: 'PUT',\n            pathname: '/api/v4/DeviceAttribute/PutDeviceAttribute',\n            headers: {SecurityToken},\n            body: {AttributeName, AttributeValue, MyQDeviceId}\n          })\n      )\n    );\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-chamberlain/node_modules/homebridge-chamberlain/src/instance.js":"// This module simply serves as a bucket to store the homebridge instance.\n"}